
type UserType {
    firstName: String
    lastName: String
    email: String
}

type UserTokenType {
    token: String
}

type SuccessType {
    success: String
}

input NewUserInput {
    firstName: String
    lastName: String
    email: String
    password: String
}

input LoginUserInput {
    email: String
    password: String
}

input UserEmailInput {
    email: String
}

input UserDetailsInput {
    firstName: String
    lastName: String
}

input UserPasswordInput {
    token: String
    password: String
}

extend type Query {
    getUserDetails: UserType!
    isUserSessionExpired: SuccessType!
    validateUserEmail(token: String): SuccessType!
}

type Mutation {
    registerNewUser(input: NewUserInput!): SuccessType!
    loginUser(input: LoginUserInput!): UserTokenType!
    updateUserDetails(input: UserDetailsInput!): SuccessType!
    verifyUserEmail(input: UserEmailInput!): SuccessType!
    requestPasswordReset(input: UserEmailInput!): SuccessType!
    resetUserPassword(input: UserPasswordInput!): SuccessType!
}
